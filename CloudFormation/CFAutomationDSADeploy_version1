AWSTemplateFormatVersion: 2010-09-09
Metadata:
  'AWS::CloudFormation::Designer':
    365a09ca-e277-44b0-a6c4-b551b5769bd9:
      size:
        width: 60
        height: 60
      position:
        x: 170
        'y': 300
      z: 1
      embeds: []
    69f800e5-71d2-4f0b-8f8b-6a801e9b7606:
      size:
        width: 60
        height: 60
      position:
        x: 300
        'y': 300
      z: 1
      embeds: []
    672abbaf-3954-4492-aa43-376f61787304:
      size:
        width: 60
        height: 60
      position:
        x: 30
        'y': 300
      z: 1
      embeds: []
      dependson:
        - 365a09ca-e277-44b0-a6c4-b551b5769bd9
    8a2c101a-1209-4852-8d7c-82295f267af9:
      size:
        width: 60
        height: 60
      position:
        x: 170
        'y': 380
      z: 1
      embeds: []
    db22d819-d2a8-455b-801d-f6419527ff0b:
      size:
        width: 60
        height: 60
      position:
        x: 370
        'y': 380
      z: 0
      embeds: []
    ae297b9e-fbf9-4b77-b105-6587eea5a32f:
      size:
        width: 60
        height: 60
      position:
        x: 170
        'y': 200
      z: 1
      embeds: []
    a4e855dc-2fb9-499a-a7df-81e7245f5949:
      size:
        width: 60
        height: 60
      position:
        x: 450
        'y': 300
      z: 0
      embeds: []
      isassociatedwith:
        - 69f800e5-71d2-4f0b-8f8b-6a801e9b7606
    8078251b-2b4f-453a-8850-381ef5bfab52:
      size:
        width: 60
        height: 60
      position:
        x: 170
        'y': 100
      z: 0
      embeds: []
      dependson:
        - ae297b9e-fbf9-4b77-b105-6587eea5a32f
    d8959c7c-9591-4644-a8a4-ead4904fc2e1:
      size:
        width: 60
        height: 60
      position:
        x: 20
        'y': 200
      z: 0
      embeds: []
      dependson:
        - ae297b9e-fbf9-4b77-b105-6587eea5a32f
    c151d2e0-c5cd-47ac-83d2-a7fd8e3688c5:
      source:
        id: d8959c7c-9591-4644-a8a4-ead4904fc2e1
      target:
        id: ae297b9e-fbf9-4b77-b105-6587eea5a32f
      z: 11
Resources:
  LambdaAutomationDeploymentDSA:
    Type: 'AWS::Lambda::Function'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 69f800e5-71d2-4f0b-8f8b-6a801e9b7606
    Properties:
      Handler: lambda_function.lambda_handler
      Role: !GetAtt 
        - RoletoLambdaFunction
        - Arn
      Code:
        S3Bucket: lambdaautomationdsadeploy
        S3Key: lambda_function.zip
      Runtime: python3.6
      MemorySize: 128
      Timeout: '3'
      Environment:
        Variables:
          ARNRole: !GetAtt RoletoEC2Instances.Arn
          NameRole: !Ref RoletoEC2Instances
          PolicyName: !Ref PolicytoRoleEC2
          InstanceProfiletoEC2Arn: !GetAtt InstanceProfiletoEC2Instances.Arn
          InstanceProfiletoEC2Name: !Ref InstanceProfiletoEC2Instances
          LinuxDocument: !Ref LinuxDeployDSADocument
  CloudWatchEvent1:
    Type: 'AWS::Events::Rule'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: db22d819-d2a8-455b-801d-f6419527ff0b
    Properties:
      EventPattern:
        detail-type:
          - EC2 Instance State-change Notification
        source:
          - aws.ec2
        detail:
          state:
            - running
      State: ENABLED
      Targets:
        - Arn:
            'Fn::GetAtt':
              - LambdaAutomationDeploymentDSA
              - Arn
          Id: IdAutomation1
  RoletoLambdaFunction:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: RoletoLambdaFunction
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 365a09ca-e277-44b0-a6c4-b551b5769bd9
  LinuxDeployDSADocument:
    Type: 'AWS::SSM::Document'
    Properties:
      Content:
        schemaVersion: '1.2'
        description: >-
          Installation and Activation Deep Security Agent using AWS SSM - Run
          Command
        parameters:
          DSHostname:
            type: String
            default: app.deepsecurity.trendmicro.com
            description: >-
              Enter the externally accessible DNS name of IP address of the Deep
              Security Manager.Please enter app.deepsecurity.trendmicro.com if
              using Deep Security as a server.
            maxChars: 4096
          DSHostnameActivation:
            type: String
            default: agents.deepsecurity.trendmicro.com
            description: >-
              Enter the externally accessible DNS name of IP address of the Deep
              Security Manager to activate agents by CLI. Please enter
              agents.deepsecurity.trendmicro.com if using Deep Security as a
              server.
            maxChars: 4096
          DSPort:
            type: String
            default: '443'
            description: >-
              Enter the port number of the Deep Security Manager. If using the
              installed software package, enter 4120 or the port accessible
              externally. Port 443 is used as default if no value is provided.
              Please enter 443 if using Deep Security as a service
            maxChars: 4096
          TenantUser:
            type: String
            default: ''
            description: >-
              Enter the tenant ID, which is a hyphenated, 36-character string
              available in the Deployment Scripts dialog box in the Deep
              Security console. This parameter is mandatory if using Deep
              Security as a Service, or a multi-tenant installation of Deep
              Security Manager. Type NA id using a non-multi-tenant Manager.
            maxChars: 4096
          TenantPass:
            type: String
            default: ''
            description: >-
              Enter the tenant activation password, which is a hyphenated,
              36-character string available in the Deployment Scripts dialog box
              in the Deep Security console. This parameter is mandatory if using
              Deep Security as a Service, or a multi-tenant installation of Deep
              Security Manager. Type NA id using a non-multi-tenant Manager.
            maxChars: 4096
          DSPolicy:
            type: String
            default: ''
            description: The Policy to be used when activating.
            maxChars: 4096
          workingDirectory:
            type: String
            default: ''
            description: (Optional) The path to the working directory on your instance.
            maxChars: 4096
          executionTimeout:
            type: String
            default: '3600'
            description: >-
              (Optional) The time in seconds for a command to complete before it
              is considered to have failed. Default is 3600 (1 hour). Maximum is
              28800 (8 hours).
            allowedPattern: >-
              ([1-9][0-9]{0,3})|(1[0-9]{1,4})|(2[0-7][0-9]{1,3})|(28[0-7][0-9]{1,2})|(28800)
        runtimeConfig:
          'aws:runShellScript':
            properties:
              - id: '0.aws:runShellScript'
                runCommand:
                  - '#!/usr/bin/env bash '
                  - 'if [[ $(/usr/bin/id -u) -ne 0 ]]; then'
                  - >-
                    logger -t You are not running as the root user.  Please try
                    again with root privileges.;
                  - exit 1;
                  - fi;
                  - if type curl >/dev/null 2>&1; then
                  - 'SOURCEURL=''https://app.deepsecurity.trendmicro.com:443'' '
                  - >-
                    CURLOUT=$(eval curl
                    $SOURCEURL/software/deploymentscript/platform/linux-secure/
                    -o /tmp/DownloadInstallAgentPackage --silent --tlsv1.2;)
                  - err=$?
                  - 'if [[ $err -eq 60 ]]; then'
                  - >-
                    echo "SSL certificate validation for the agent package
                    download has failed. Please check that your Deep Security
                    Manager SSL certificate is signed by a trusted root
                    certificate authority. For more information, search for
                    "deployment scripts" in the Deep Security Help Center." 
                  - >-
                    logger -t SSL certificate validation for the agent package
                    download has failed. Please check that your Deep Security
                    Manager SSL certificate is signed by a trusted root
                    certificate authority. For more information, search for
                    "deployment scripts" in the Deep Security Help Center. 
                  - exit 2;
                  - fi
                  - 'if [ -s /tmp/DownloadInstallAgentPackage ]; then'
                  - >-
                    if echo
                    'E7775395D5FFF56CCD7D2F171ECFE2F8A704DC109C9215B7E29BC09CCC92045C 
                    /tmp/DownloadInstallAgentPackage' | sha256sum -c; then
                  - '. /tmp/DownloadInstallAgentPackage '
                  - 'Download_Install_Agent '
                  - 'else '
                  - 'echo "Failed to validate the agent installation script." '
                  - 'logger -t Failed to validate the agent installation script '
                  - 'false'
                  - fi
                  - else
                  - 'echo "Failed to download the agent installation script." '
                  - >-
                    logger -t Failed to download the Deep Security Agent
                    installation script
                  - 'false'
                  - fi
                  - else
                  - 'echo " Please install CURL before running this script." '
                  - logger -t Please install CURL before running this script
                  - 'false'
                  - fi
                  - sleep 15
                  - '/opt/ds_agent/dsa_control -r '
                  - >-
                    sudo /opt/ds_agent/dsa_control -a dsm://{{
                    DSHostnameActivation }}:{{ DSPort }}/ 'tenantID:{{
                    TenantUser }}' 'token:{{ TenantPass }}' 'policyid:{{
                    DSPolicy }}' 
                workingDirectory: '{{ workingDirectory }}'
                timeoutSeconds: '{{ executionTimeout }}'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 8a2c101a-1209-4852-8d7c-82295f267af9
  RoletoEC2Instances:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: RoletoEC2Instances
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: ae297b9e-fbf9-4b77-b105-6587eea5a32f
  PolicytoRoleLambdaFunction:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: PolicytoRoleLambdaFunction
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: '*'
            Resource: '*'
      Roles:
        - !Ref RoletoLambdaFunction
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 672abbaf-3954-4492-aa43-376f61787304
    DependsOn:
      - RoletoLambdaFunction
  ProdAutoSSMLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      FunctionName:
        'Fn::GetAtt':
          - LambdaAutomationDeploymentDSA
          - Arn
      SourceArn:
        'Fn::GetAtt':
          - CloudWatchEvent1
          - Arn
      Principal: events.amazonaws.com
    Metadata:
      'AWS::CloudFormation::Designer':
        id: a4e855dc-2fb9-499a-a7df-81e7245f5949
  InstanceProfiletoEC2Instances:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref RoletoEC2Instances
      InstanceProfileName: InstanceProfiletoEC2Instances
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 8078251b-2b4f-453a-8850-381ef5bfab52
    DependsOn:
      - RoletoEC2Instances
  PolicytoRoleEC2:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'iam:PassRole'
              - 'ec2:DescribeInstances'
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
              - 'ssm:*'
              - 'lambda:*'
              - 'iam:ListRoles'
            Resource: '*'
      Roles:
        - !Ref RoletoEC2Instances
    Metadata:
      'AWS::CloudFormation::Designer':
        id: d8959c7c-9591-4644-a8a4-ead4904fc2e1
    DependsOn:
      - RoletoEC2Instances
Outputs:
  RoletoEC2Arn:
    Description: The ARN of Role
    Value: !GetAtt RoletoEC2Instances.Arn
  PolicytoEC2Arn:
    Description: The ARN from the Policy to Role EC2 Instances
    Value: !Ref PolicytoRoleEC2
    Export:
      Name: PolicyRoleforEC2
  DocumentLinux:
    Description: Info about Document Deploy for Linux
    Value: !Ref LinuxDeployDSADocument
